#include "dkli.dkh"
program "Devkron File System Operations (Dkl FSO) [Upload command]"
{
	#!
	#include "functions.dkh"
	#include "serialize.dkh"
    #include "webcl.dkh"

    #include "webauth.dkl"
    #include "fso.config.dk"
    #include "fso.dk"

    ref @ziplib = _import_library("System.IO.Compression.ZipFile.dll")
    do _map_function(@ziplib, "System.IO.Compression.ZipFile", "ExtractToDirectory", "zipToDir","System.String,System.String","void")
    do _map_function(-1,"System.Convert","FromBase64String","fbase64","System.String","*")

    ref p=dklfso.parseRequest()
    
    new res { @"success": @true }

    ppath=path.concat(@@(p,"base_path"),@@(p,"uri"))
    
    ref obj=dklfso.createObjectInfo(@@(p,"base_path"),@@(p,"uri"))

    if isnull(obj)
    {
        ref privs=dklfso.getPrivs(ppath,@true )
        if isnull(privs) { do rise_error(0, "No existe el folder indicado y no hay manifiesto de privilegios disponible") }

        ref obj=record.create()
        using obj
        {
            @"type":"folder"
            @"fullpath":@@(p,"uri")
            @"path":dir.name(@@(p,"uri"))
            @"name":file.name(@@(p,"uri"))
            @"privileges":@@(privs,"&privileges")
            @"priv_inherited":@@(privs,"#priv_inherited")
        }

        if dklfso.auth(obj,@op_id_dkl_fso_mkdir) && not(dklfso.isprotected(@@(obj,"fullpath")))
        {
            do dir.ensure(ppath)
            exception{do rise_error(0,"No se pudo crear la estructura de directorios") }
        }
        else { do rise_error(0,"No está autorizado para crear la estructura de directorios") }
    }

    if @@(obj,"type")!="folder" { do rise_error(0,"El destino no es un directorio") }
    if not(dklfso.auth(obj,@op_id_dkl_fso_upload)){ do rise_error(0,"No está autorizado para subir archivos en esta ubicación") }
    
    ref files=field.obj(@http_context,"request/files")
    
    if list.count(files)<1 { do rise_error(0,"No se han enviado archivos") }
    //do file.wtext("filess.txt", to.json(files))
    ref fres=record.create()

    for i=0;i<list.count(files)
    {
        ref f=list.obj(files,i)

        rpath = ppath
        //============= Files in folder
        if contains(@@(f,"field"),"/"){ rpath = path.concat(ppath,dir.name(@@(f,"field")))}
        //=============
        
        fres<field.str(f,"filename")+"*">:record.create()
        au=@true

        if file.exists(path.concat(rpath,field.str(f,"filename")))
        {
            if not(dklfso.auth(dklfso.createObjectInfo(@@(p,"base_path"),@@(p,"uri")),@op_id_dkl_fso_upload)) 
            {
                au=@false
                fres<field.str(f,"filename")+"/message">:"No autorizado"
            }
        }

        if au && isanyword(tolower(file.extension(path.concat(rpath,field.str(f,"filename")))),tolower(@dklfso_danger_files_ext))
        {
            if not(dklfso.auth(dklfso.createObjectInfo(@@(p,"base_path"),@@(p,"uri")),@op_id_dkl_fso_danger)) 
            {
                au=@false
                fres<field.str(f,"filename")+"/message">:"No autorizado"
            }
        }

        // ensure creating folder if not exist
        do dir.ensure(rpath)
        // copy
        if au { do file.copy(field.str(f,"temp_file"),path.concat(rpath,field.str(f,"filename"))) }
        
        // Upload Zip and extract
        if file.extension(field.str(f,"field"))==".zip"+@dklfso_id_process_file || file.extension(field.str(f,"field"))==".rar"+@dklfso_id_process_file
        {
            if not(dklfso.auth(dklfso.createObjectInfo(@@(p,"base_path"),@@(p,"uri")),@op_id_dkl_fso_zip)) 
            {
                au=@false
                fres<field.str(f,"filename")+"/message">:"No autorizado"
            }
            else
            {
                do zipToDir(path.concat(rpath,field.str(f,"filename")), rpath)
                exception{}
                do file.delete(path.concat(rpath,field.str(f,"filename")))
            }
        }

        // Upload websencia file and process
        if file.extension(field.str(f,"field"))==".jsnwm"+@dklfso_id_process_file
        {
            ref dataws = from.json(file.rtext(path.concat(rpath,field.str(f,"filename"))))
            out_zip = path.concat(rpath,file.justname(field.str(f,"filename")))+".zip"

            if field.exist(dataws,"_system"){ do field.remove(dataws,"_system") }

            new h { @"Content-Type":"application/json" }

            sresponse=http.request("https://websencia.dev/build/","POST",h,to.base64(to.json(dataws)))
            do file.wtext("ressss.txt", sresponse)

            ref dt=from.json(sresponse)
            do http.download(path.concat("https://websencia.dev",replace(@@(dt,"filename"),"./","")), out_zip)

            do zipToDir(out_zip, rpath)
            exception{}
            do file.delete(out_zip)
            do file.delete(path.concat(rpath,field.str(f,"filename")))
        }

        exception
        {
            au=@false
            fres<field.str(f,"filename")+"/message">:last_error()
        }

        fres<field.str(f,"filename")+"/done">:au
    }

    res<"data*">: fres

    exception
    {
        res<"message">:last_error()
        res<"success">:@false
    }


    @http_context<"response/headers/Content-Type">:"application/json;charset=utf-8"
    @http_context<"response/output">:"text"
    @http_context<"response/text">: to.json( res )
}