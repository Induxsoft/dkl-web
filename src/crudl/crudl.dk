#include "dkli.dkh"
#!
module "crudl"
{
    ref @_crudl.internal.patterns=list.create()
    @crudl_routes_json="routes.json"

    #!
    _crudl.internal.firstChar::s
    {
        if s=="" { return "" }
        return substring(s,0,1)
    }

    #!
    _crudl.internal.lastChar::s
    {
        if s=="" { return "" }
        return substring(s,length(s)-1,1)
    }

    #!
    crudl.config_file::path
    {
        if path=="" { return "" }
        if _crudl.internal.lastChar(path)=="/" || _crudl.internal.lastChar(path)=="\\"
        {
            path=substring(path,0,length(path)-1)
        }

        path=path+".crudl"

        if isset("@http_context")
        {
            host=field.dstr(@http_context,"request/headers/http_host",field.dstr(@http_context,"request/headers/SERVER_NAME","localhost"))
            cfg_file=path.concat("_config",host)
            cfg_file=path.concat(cfg_file,path)
            if file.exists(cfg_file) { return cfg_file }
        }

        cfg_file=path.concat("_config",path)
        if file.exists(cfg_file) { return cfg_file }

        if file.exists(path) { return path }
        return ""
    }

    #!
    crudl.load_config::
    {
        f=crudl.config_file(@base_path)
        if f=="" { return }
        ref @crudl_config=from.json(file.rtext(f))
        exception { do pop_exception() }
    }

    #!
    crudl.routes.pattern::pattern
    {
        pattern=trim(tolower(pattern))
        if pattern=="" { return }

        if _crudl.internal.lastChar(pattern)=="/" { pattern=trim(substring(pattern,0,length(pattern)-1)) }
        if _crudl.internal.firstChar(pattern)=="/" { pattern=trim(substring(pattern,1,length(pattern)-1)) }

        if pattern=="" { return }

        do list.add(@_crudl.internal.patterns,pattern)

    }

    #!
    crudl.routes.resolve::
    {
        route=""
        for i=0;i<@count(@_crudl.internal.patterns)
        {
            ref parts=split(list.str(@_crudl.internal.patterns,i),"/")
            for j=0;j<@count(parts)
            {
                p=trim(@@(@http_context,"$request/get/"+list.str(parts,j)))
                if p=="" { break }
                route=route+p+"/"
            }
        }
        if _crudl.internal.lastChar(route)=="/" { route=trim(substring(route,0,length(route)-1)) }
        return tolower(route)
    }

    #!
    crudl.routes.entity::route,entity
    {
        route=trim(tolower(route))
        if route=="" { return 0 }

        if _crudl.internal.lastChar(route)=="/" { route=trim(substring(route,0,length(route)-1)) }
        if _crudl.internal.firstChar(route)=="/" { route=trim(substring(route,1,length(route)-1)) }

        if route=="" { return 0 }

        if tolower(route)==crudl.routes.resolve()
        {
            if trim(entity)!="" { @http_context<"request/get/_entities_type">:entity }
            return 1
        }

        return 0
    }

    #!
    crudl.route::route
    {
        return crudl.routes.entity(route,"")
    }

    #!
    crudl.database::
	{
		ref db = @null

		if isset("@http_context") { ref db = @@(@http_context,"&session/idp/database") }
		else if isset("@crud_context") { ref db = @@(@crud_context,"&http/session/idp/database") }

		return db
	}

    #!
    crudl.loadRoutesJSON::
    {
        routes_file=path.concat(@path_root,@base_path)
    	routes_file=path.concat(routes_file,@crudl_routes_json)

        if file.exists(routes_file)
        {
            ref patterns=from.json(file.rtext(routes_file))
            for i=0;i<@count(patterns)
            {
                ref pattern=@item(patterns,i)
                if trim(@@(pattern,"pattern"))!=""
                {
                    do crudl.routes.pattern(trim(@@(pattern,"pattern")))
                    ref routes=@@(pattern,"&routes") 
                    for j=0;j<@count(routes)
                    {
                        ref route=@item(routes,j)
                        if trim(@@(route,"route"))!="" && trim(@@(route,"entity_type"))!=""
                        {
                            do crudl.routes.entity(trim(@@(route,"route")),trim(@@(route,"entity_type")))
                        }
                    }
                }
            }
            exception{}
        }
    }
}

    