#include "dkli.dkh"
program "Devkron File System Operations (Dkl FSO) [Do command]"
{
	#!
	#include "functions.dkh"
	#include "serialize.dkh"

    #include "webauth.dkl"
    #include "fso.config.dk"
    #include "fso.dk"

    dklfso.copyFile::&p, &obj, &post_data, &uris, i,has_filename
    {
        if @@(obj,"type")=="folder" { do rise_error(0,"Not implemented")}
        else 
        { 
            resource_uri=@@(obj,"fullpath")
            if has_filename
            {
                target_dir=dir.name(@@(post_data,list.str(uris,i)+"/to"))
                target_file=file.name(@@(post_data,list.str(uris,i)+"/to"))
            }
            else
            {
                target_dir=@@(post_data,list.str(uris,i)+"/to")
                target_file=file.name(resource_uri)
            }
            ref dest_folder=dklfso.createObjectInfo(@@(p,"base_path"),target_dir)
            if isnull(dest_folder)
            {
                ppath=path.concat(@@(p,"base_path"),target_dir)
                ref privs=dklfso.getPrivs(ppath,@true )
                if isnull(privs) { do rise_error(0, "No existe el folder indicado y no hay manifiesto de privilegios disponible") }

                ref dest_folder=record.create()
                using dest_folder
                {
                    @"type":"folder"
                    @"fullpath":@@(p,"uri")
                    @"path":dir.name(@@(p,"uri"))
                    @"name":file.name(@@(p,"uri"))
                    @"privileges":@@(privs,"&privileges")
                    @"priv_inherited":@@(privs,"#priv_inherited")
                }
                
                if dklfso.auth(dest_folder,@op_id_dkl_fso_mkdir) && not(dklfso.isprotected(@@(dest_folder,"fullpath")))
                {
                    do dir.ensure(ppath)
                    exception{do rise_error(0,"No se pudo crear la estructura de directorios") }
                }
                else { do rise_error(0,"No está autorizado para crear la estructura de directorios") }
            }
            
            if not(dklfso.auth(dest_folder,@op_id_dkl_fso_upload)){ do rise_error(0,"No está autorizado para subir archivos en esta ubicación") }
            if isanyword(tolower(file.extension(resource_uri)),tolower(@dklfso_danger_files_ext)) || isanyword(tolower(file.extension(target_file)),tolower(@dklfso_danger_files_ext))
            {
                if not(dklfso.auth(dest_folder,@op_id_dkl_fso_danger)) 
                {
                    do rise_error(0,"No autorizado, extensión peligrosa")
                }
            }
            
            src=path.concat(@@(p,"base_path"),resource_uri)
            dest=path.concat(@@(p,"base_path"),path.concat(target_dir,target_file))
            do file.copy(src,dest) 

            if file.exists(src+@dklfso_metadata_ext) { do file.copy(src+@dklfso_metadata_ext,dest+@dklfso_metadata_ext)  }
            if file.exists(src+@dklfso_privs_ext) { do file.copy(src+@dklfso_privs_ext,dest+@dklfso_privs_ext)  }
        }
    }

    ref p=dklfso.parseRequest()
    
    new res { @"success": @true }

    ref post_data=from.json(field.dstr(@http_context,"request/post_string","{}"))
    ref uris=list.create_from_fields(post_data)
    ref fres=record.create()

    for i=0;i<@count(uris)
    {
        fres<list.str(uris,i)+"*">:record.create()
        fres<list.str(uris,i)+"/done">:@false

        if list.str(uris,i)=="." { resource_uri=@@(p,"uri") }
        else{ resource_uri=ifstr(replace(dklfso.firstChar(list.str(uris,i)),"\\","/")=="/",list.str(uris,i) ,path.concat(@@(p,"uri"),list.str(uris,i))) }

        ref obj=dklfso.createObjectInfo(@@(p,"base_path"),resource_uri)

        if isnull(obj) { do rise_error(0,"Resource not found") }
        else
        {
            switch tolower(@@(post_data,list.str(uris,i)+"/action"))
            {
                case "delete"
                {
                    if not(dklfso.auth(obj,@op_id_dkl_fso_delete)) { do rise_error(0,"No autorizado") }
                    if @@(obj,"type")=="folder" { do dir.delete(path.concat(@@(p,"base_path"),resource_uri)) }
                    else 
                    { 
                        do file.delete(path.concat(@@(p,"base_path"),resource_uri)) 
                        
                        if file.exists(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_metadata_ext)
                        { do file.delete(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_metadata_ext)}
                        if file.exists(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_privs_ext)
                        { do file.delete(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_privs_ext)}
                    }
                }
                case "copy"
                {
                    if not(dklfso.auth(obj,@op_id_dkl_fso_copy)) { do rise_error(0,"No autorizado") }
                    do dklfso.copyFile(p,obj,post_data, uris,i,@false)
                }
                case "move"
                {
                    if @@(obj,"type")=="folder" { do rise_error(0,"Not implemented") }
                    if not(dklfso.auth(obj,@op_id_dkl_fso_move)) { do rise_error(0,"No autorizado") }

                    do dklfso.copyFile(p,obj,post_data, uris,i,@false)
                    do file.delete(path.concat(@@(p,"base_path"),resource_uri))

                    if file.exists(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_metadata_ext)
                    { do file.delete(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_metadata_ext)}
                    if file.exists(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_privs_ext)
                    { do file.delete(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_privs_ext)}
                }
                case "rename"
                {
                    if @@(obj,"type")=="folder" { do rise_error(0,"Not implemented") }
                    if not(dklfso.auth(obj,@op_id_dkl_fso_rename)) { do rise_error(0,"No autorizado") }

                    post_data<list.str(uris,i)+"/to">:path.concat(dir.name(resource_uri), @@(post_data,list.str(uris,i)+"/as"))
                    do dklfso.copyFile(p,obj,post_data, uris,i,@true)
                    do file.delete(path.concat(@@(p,"base_path"),resource_uri))

                    if file.exists(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_metadata_ext)    
                    { do file.delete(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_metadata_ext)}
                    if file.exists(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_privs_ext)
                    { do file.delete(path.concat(@@(p,"base_path"),resource_uri)+@dklfso_privs_ext)}
                }
                case "mkdir"
                {
                    if not(dklfso.auth(obj,@op_id_dkl_fso_mkdir)) { do rise_error(0,"No autorizado") }
                    trg=replace(path.concat(@@(p,"base_path"),path.concat(resource_uri,@@(post_data,list.str(uris,i)+"/path"))),"\\","/")
                    
                    if @@(obj,"type")=="folder" { do dir.ensure(trg) }
                    else { do rise_error(0,"Action invalid") }
                }
                default { do rise_error(0,"Command invalid") }
            }
            fres<list.str(uris,i)+"/done">:@true
        }
        exception
        {
            fres<list.str(uris,i)+"/message">:last_error()
        }

    }
    
    res<"data*">: fres

    exception
    {
        res<"message">:last_error()
        res<"success">:@false
    }


    @http_context<"response/headers/Content-Type">:"application/json;charset=utf-8"
    @http_context<"response/output">:"text"
    @http_context<"response/text">: to.json( res )
}